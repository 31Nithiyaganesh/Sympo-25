/**
  Browser should support Houdini API
*/

@property --gradient-angle {
  syntax: "<angle>";
  initial-value: 90deg;
  inherits: false;
}

:root {
  --bg-background: #181630;
  --clr-card: #1f2937;
  --clr-1: #6420aa;
  --clr-2: #ff3ea5;
  --clr-3: #ff7ed4;
}

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.card:hover {
  transform: translateY(-15px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
}


/* .card:hover {
  transform: translateY(-10px) scale(1.05);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
  background: linear-gradient(145deg, #66fcf1, #45a29e);
} */

/* .card:hover::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.1);
  pointer-events: none;
  z-index: 1;
  mix-blend-mode: overlay;
}

.card:hover .card-content {
  color: #0b0c10;
  transition: color 0.3s ease-in-out;
} */

body {
  height: 100vh;
  width: 100%;
  overflow-x: hidden;
  background-color: var(--bg-background);
}

main {
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.card {
  position: relative;
  height: 22.6rem;
  width: 16rem;
  /* border-radius: 0.45rem; */
  cursor: pointer;
  background-color: var(--clr-card);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card::after,
.card::before {
  content: " ";
  position: absolute;
  z-index: -1;
  inset: -0.5rem;
  background: conic-gradient(
    from var(--gradient-angle),
    var(--clr-card),
    var(--clr-1),
    var(--clr-2),
    var(--clr-3),
    var(--clr-2),
    var(--clr-1),
    var(--clr-card)
  );
  border-radius: inherit;
  animation: rotate 2.5s linear infinite;
}

.card::after {
  filter: blur(3rem);
}

.cardButton {
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
}
@keyframes rotate {
  0% {
    --gradient-angle: 0deg;
  }
  100% {
    --gradient-angle: 360deg;
  }
}
.new-about-container {
  display: flex;
  align-items: center;
  border: 2px solid white; /* Aligns items vertically centered */ /* Places text on the left and cubes on the right */ /* Adds space between the text content and the cubes */
}

.typing-cursor::after {
  content: '|';
  display: inline-block;
  animation: blink 0.7s step-end infinite;
}

@keyframes blink {
  50% {
    opacity: 0;
  }
}
/* Glassmorphic container with padding */
.glassmorphic-container {
background: rgba(255, 255, 255, 0.1); /* Semi-transparent white */
box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2); /* Soft shadow for depth */
backdrop-filter: blur(10px); /* Blur background elements */
-webkit-backdrop-filter: blur(10px); /* Safari compatibility */
border: 1px solid rgba(255, 255, 255, 0.2); /* Subtle border */
border-radius: 16px; /* Smooth rounded edges */
padding: 2rem; /* Inner padding for content */
margin: 1rem; /* Outer margin to center it visually */
width: calc(100% - 2rem); /* Ensure the glass container doesn't touch edges */
max-width: 1200px; /* Optional: Set a maximum width for large screens */
transition: all 0.3s ease; /* Smooth hover effect */
}

/* Optional: Add hover effect for interactivity */
.glassmorphic-container:hover {
background: rgba(255, 255, 255, 0.2); /* Slightly less transparent on hover */
box-shadow: 0 6px 40px rgba(0, 0, 0, 0.3); /* Enhanced shadow on hover */
}


.cubes {
  position: relative; /* Changed from absolute to relative for proper alignment */
  display: flex;
  justify-content: center; /* Centers the cubes horizontally */
  align-items: center; /* Centers the cubes vertically */
  transform-style: preserve-3d;
  width: 200px; /* Adjust based on your layout needs */
  height: 200px; /* Adjust based on your layout needs */
  perspective: 1000px; /* Adds a perspective for 3D effect */
}

.loop {
  transform: rotateX(-35deg) rotateY(-45deg) translateZ(1.5625em);
}

@keyframes s {
  to {
    transform: scale3d(0.2, 0.2, 0.2);
  }
}

.item {
  margin: -1.0em;
  width: 2em;
  height: 2em;
  transform-origin: 50% 50% -1.0em;
  box-shadow: 0 0 0.125em currentColor;
  background: currentColor;
  animation: s 0.6s cubic-bezier(0.45, 0.03, 0.51, 0.95) infinite alternate;
}

.item:before,
.item:after {
  position: absolute;
  width: inherit;
  height: inherit;
  transform-origin: 0 100%;
  box-shadow: inherit;
  background: currentColor;
  content: "";
}

.item:before {
  bottom: 100%;
  transform: rotateX(90deg);
}

.item:after {
  left: 100%;
  transform: rotateY(90deg);
}

.item:nth-child(1) {
  margin-top: 6.25em;
  color: #7F00FF;
  animation-delay: -1.2s;
}

.item:nth-child(1):before {
  color: #8700FF;
}

.item:nth-child(1):after {
  color: #8F00FF;
}

.item:nth-child(2) {
  margin-top: 3.125em;
  color: #9700FF;
  animation-delay: -1s;
}

.item:nth-child(2):before {
  color: #A000FF;
}

.item:nth-child(2):after {
  color: #A800FF;
}

.item:nth-child(3) {
  margin-top: 0em;
  color: #B000FF;
  animation-delay: -0.8s;
}

.item:nth-child(3):before {
  color: #B800FF;
}

.item:nth-child(3):after {
  color: #C000FF;
}

.item:nth-child(4) {
  margin-top: -3.125em;
  color: #C800FF;
  animation-delay: -0.6s;
}

.item:nth-child(4):before {
  color: #D000FF;
}

.item:nth-child(4):after {
  color: #D800FF;
}

.item:nth-child(5) {
  margin-top: -6.25em;
  color: #E000FF;
  animation-delay: -0.4s;
}

.item:nth-child(5):before {
  color: #E080FF;
}

.item:nth-child(5):after {
  color: #e28ff7;
}

.item:nth-child(6) {
  margin-top: -9.375em;
  color: #E100FF;
  animation-delay: -0.2s;
}

.item:nth-child(6):before {
  color: #E150FF;
}

.item:nth-child(6):after {
  color: #E180FF;
}
